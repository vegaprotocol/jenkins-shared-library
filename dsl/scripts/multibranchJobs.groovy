
def h(def text, def num=4) {
    return "<h${num}>${text}</h${num}>"
}

def standardDescription() {
    def url = "https://github.com/vegaprotocol/jenkins-shared-library/tree/main/dsl"
    return h("""
        This job was automatically generated by DSL script located at <a href="${url}">this repository</a> and processed by <a href='${binding.variables.get('JOB_URL')}'>this job</a>, any manual configuration will be overriden.
    """, 5)
}

def generateUUIDForString(String name) {
    return UUID.nameUUIDFromBytes(name.getBytes()).toString();
}

// https://jenkins.ops.vega.xyz/plugin/job-dsl/api-viewer/index.html#path/multibranchPipelineJob
def createCommonMultibranchPipeline(Map args){
    return multibranchPipelineJob(args.name) {
        description(standardDescription())
        authorization {
            permission("hudson.model.Item.Read","Anonymous")
        }
        orphanedItemStrategy {
            discardOldItems {
                daysToKeep(14)
            }
        }
        triggers {
            periodicFolderTrigger {
                interval("10m")
            }
        }
        factory {
            workflowBranchProjectFactory {
                scriptPath("Jenkinsfile")
            }
        }
        branchSources {
            branchSource {
                source {
                    github {
                        repoOwner("vegaprotocol")
                        repository("${args.repoName ?: args.name}")
                        configuredByUrl(true)
                        repositoryUrl("https://github.com/vegaprotocol/${args.repoName ?: args.name}")
                        credentialsId('Vega Jenkins')
                        id(generateUUIDForString(args.name))
                        traits {
                            cloneOption {
                                extension {
                                    honorRefspec(true)
                                    noTags(false)
                                    timeout(3)
                                    shallow(false)
                                    reference("")
                                }
                            }
                            cleanAfterCheckout {
                                extension {
                                    deleteUntrackedNestedRepositories(true)
                                }
                            }
                            gitHubBranchDiscovery {
                                // 1 Exclude branches that are also filed as PRs
                                // 2 Only branches that are also filed as PRs
                                // 3 All branches
                                strategyId(3)
                            }
                            gitHubPullRequestDiscovery {
                                // 1 Merging the pull request with the current target branch revision
                                // 2 The current pull request revision
                                // 3 Both the current pull request revision and the pull request merged with the current target branch revision
                                strategyId(1)
                            }
                            gitTagDiscovery()
                        }
                    }
                }
                strategy {
                    allBranchesSame {

                    }
                }
                buildStrategies {
                    buildChangeRequests {
                        ignoreTargetOnlyChanges(true)
                        ignoreUntrustedChanges(true)
                    }
                    buildNamedBranches {
                        filters {
                            wildcards {
                                includes("develop main master")
                            }
                        }
                    }
                    buildTags {
                        atMostDays("3")
                    }
                }
            }
        }
    }
}

def multibranchJobs = [
    [
        name: 'vegacapsule-test',
        repoName: 'vegacapsule',
    ],
]

multibranchJobs.each {
    createCommonMultibranchPipeline(it)
}