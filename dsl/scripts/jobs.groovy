// https://github.com/janinko/ghprb/issues/77
def scmDefinition(args){
  return {
    cpsScm {
      scm {
        git {
          remote {
            url(args.repo)
            credentials(args.get('credentials', "vega-ci-bot"))
          }
        }
      }
      scriptPath(args.get('jenkinsfile', 'Jenkinsfile'))
    }
  }
}

def standardDescription() {
    def url = "https://github.com/vegaprotocol/jenkins-shared-library/tree/main/dsl"
    return  """
        <h3>
        This job was automatically generated by DSL script located at <a href="${url}">this repository</a> and processed by <a href='${binding.variables.get('JOB_URL')}'>this job</a>, any manual configuration will be overriden.
        </h3>
    """
}

def createCommonPipeline(args){
    args.repo = "git@github.com:vegaprotocol/${args.repo}.git"
    return pipelineJob(args.name) {
        description(standardDescription())
        if (args.get('githubTrigger', true)) {
            properties {
                pipelineTriggers {
                    triggers {
                        githubPush()
                    }
                }
            }
        }
        logRotator {
            daysToKeep(45)
        }
        if (args.triggers) {
            triggers args.triggers
        }
        environmentVariables {
            keepBuildVariables(true)
            keepSystemVariables(true)
            args.env.each { key, value ->
                env(key.toUpperCase(), value)
            }
        }
        if (args.get('useScmDefinition', true)) {
            definition scmDefinition(args)
        }
        else {
            definition {
                cps {
                    script(args.definition.script)
                    sandbox()
                }
            }
        }

    }
}

def jobs = [
    [
        name: 'private/cd/capsule-test',
        useScmDefinition: false,
        definition: [
            script: """
                @Library('vega-shared-library') _
                capsulePipeline()
            """
        ]
    ]
]

jobs.each { job ->
    createCommonPipeline(job)
}