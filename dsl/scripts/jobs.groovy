/* groovylint-disable CompileStatic, DuplicateNumberLiteral, DuplicateStringLiteral, LineLength */
// https://github.com/janinko/ghprb/issues/77
def scmDefinition(args){
    return {
        cpsScm {
            scm {
                git {
                    if (args.branch) {
                        branch("*/${args.branch}")
                    }
                    remote {
                        if (args.useGithub) {
                            github(args.repoName)
                        }
                        else {
                            url(args.repo)
                            credentials(args.get('credentials', "vega-ci-bot"))
                            if (args.branch) {
                                refspec("+refs/heads/${args.branch}:refs/remotes/origin/${args.branch}")
                            }
                        }
                    }
                    if (args.check) {
                        extensions {
                            gitSCMChecksExtension {
                                // If this option is checked, verbose log will be output to build console; the verbose log is useful for debugging the publisher creation.
                                verboseConsoleLog(true)
                            }
                            gitSCMStatusChecksExtension {
                                name(args.check)
                                unstableBuildNeutral(true)
                            }
                        }
                    }
                }
            }
            scriptPath(args.get('jenkinsfile', 'Jenkinsfile'))
        }
    }
}

def h(def text, def num=4) {
    return "<h${num}>${text}</h${num}>"
}

def ul(def ulMap) {
    if (ulMap instanceof Map) {
        ulMap = ulMap.collect { "${it.key} - ${it.value}" }
    }
    def entries = ulMap.collect { "<li>${it}</li>" }.join("\n")
    return "<ul>${entries}</ul>"
}


def standardDescription() {
    def url = "https://github.com/vegaprotocol/jenkins-shared-library/tree/main/dsl"
    return h("""
        This job was automatically generated by DSL script located at <a href="${url}">this repository</a> and processed by <a href='${binding.variables.get('JOB_URL')}'>this job</a>, any manual configuration will be overriden.
    """, 5)
}


def createCommonPipeline(args){
    args.repoName = "vegaprotocol/${args.repo}"
    args.repo = "git@github.com:vegaprotocol/${args.repo}.git"

    def des = args.get('description', '')
    des += "${des ? '<br/>' : ''} ${standardDescription()}"

    return pipelineJob(args.name) {

        disabled(args.get('disabled', false))

        description(des)

        logRotator {
            daysToKeep(args.daysToKeep ?: 45)
            numToKeep(args.numToKeep ?: 1000)
            artifactDaysToKeep(args.daysToKeep ?: 45)
            artifactNumToKeep(args.numToKeep ?: 1000)
        }

        if (args.parameters) {
            parameters args.parameters
        }

        environmentVariables {
            keepBuildVariables(true)
            keepSystemVariables(true)
            args.env.each { key, value ->
                env(key.toUpperCase(), value)
            }
        }

        if (args.get('useScmDefinition', true)) {
            definition scmDefinition(args)
        }
        else {
            definition args.definition
        }

        properties {
            if (args.copyArtifacts) {
                copyArtifactPermission {
                    projectNames('*')
                }
            }
            if (args.disableConcurrentBuilds) {
                disableConcurrentBuilds {
                    abortPrevious(args.abortPrevious ?: false)
                }
            }
            pipelineTriggers {
                triggers {
                    if (args.get('useScmDefinition', true)) {
                        githubPush()
                    }
                    if (args.cron) {
                        cron {
                            spec(args.cron)
                        }
                    }
                    if (args.parameterizedCron) {
                        parameterizedCron {
                            parameterizedSpecification(args.parameterizedCron)
                        }
                    }
                }
            }
        }
    }
}

def libDefinition(methodName) {
    return {
        cps {
            script('''
            library (
                identifier: "vega-shared-library@${env.JENKINS_SHARED_LIB_BRANCH}",
                changelog: false,
            )

            ''' + methodName)
        }
    }
}

def vegavisorParamsBase() {
    return {
        stringParam('VEGACAPSULE_BRANCH', 'main', 'Git branch, tag or hash of the vegaprotocol/vegacapsule repository')
        stringParam('DEVOPSTOOLS_BRANCH', 'main', 'Git branch, tag or hash of the vegaprotocol/devopstools repository')
        stringParam('ANSIBLE_BRANCH', 'master', 'Git branch, tag or hash of the vegaprotocol/ansible repository')
        stringParam('NETWORKS_INTERNAL_BRANCH', 'main', 'Git branch, tag or hash of the vegaprotocol/networks-internal repository')
        stringParam('JENKINS_SHARED_LIB_BRANCH', 'main', 'Branch of jenkins-shared-library from which pipeline should be run')
    }
}

def vegavisorRestartNetworkParams(args=[:]) {
    def choices = [
        'restart-network': 'regular restart',
        'quick-restart-network': 'fast restart without config updates',
        'create-network': 'reset network, additionally runs playbook-barenode-common.yaml that provisions software for nodes',
        'stop-network': 'stop entire network',
    ]
    return vegavisorParamsBase() << {
        choiceParam('ACTION', choices.keySet() as List, h('action to be performed with a network') + ul(choices))
        stringParam('RELEASE_VERSION', '', 'Specify which version of vega to deploy. Leave empty to restart network only.')
        stringParam('DOCKER_VERSION', '', 'Specify which version of docker images to deploy. Leave empty to not change.')
        booleanParam('UNSAFE_RESET_ALL', true, 'If set to true then delete all local state. Otherwise leave it for restart.')
        booleanParam('USE_CHECKPOINT', args.get('USE_CHECKPOINT', true), 'This will download latest checkpoint and use it to restart the network with')
        booleanParam('CREATE_MARKETS', args.get('CREATE_MARKETS', false), h('create markets'))
        booleanParam('TOP_UP_BOTS', args.get('TOP_UP_BOTS', false), h('trigger top up job'))
        stringParam('DEVOPSSCRIPTS_BRANCH', 'main', 'Git branch, tag or hash of the vegaprotocol/devopsscripts repository')
        stringParam('CHECKPOINT_STORE_BRANCH', 'main', 'Git branch, tag or hash of the vegaprotocol/checkpoint-store repository')
        stringParam('TIMEOUT', '40', 'Number of minutes after which the job will stop')
        stringParam('VEGA_VERSION', '', '''(Use only if you know what you are doing). Specify which version of vega to deploy. Leave empty to restart network only.
        Provide git branch, tag or hash of the vegaprotocol/vega repository or leave empty''')
    }
}

devopsInfraDocs = h('Please read the docs located <a href="https://github.com/vegaprotocol/devops-infra/blob/master/doc/manage-new-network.md">here</a> on how to manage and debug networks', 2)

def vegavisorManageNodeDescription() {
    return devopsInfraDocs + "<br/>Some popular scenarios to run with this job<br/>" + ul([
        'ansible tag "restart-node" + unsafe_reset_all set to true is restart from block 0 without local snapshot',
        'ansible tag "restart-node" without unsafe_reset_all is restart from local snapshot (due to vegavisor config located in ansible)',
        'ansible tag "create-node" + unsafe_reset_all + use_remote_snapshot + join_as_validator causes node to be reconfigured from 0 and join network as validator ',
    ])
}

def vegavisorManageNodeParams(args=[:]) {
    def choices = [
        'restart-node': 'regular restart',
        'quick-restart-node': 'fast restart without config updates',
        'create-node': 'reset node',
        'stop-node': 'stop node',
    ]
    return vegavisorParamsBase() << {
        choiceParam('ACTION', choices.keySet() as List, h('action to be performed with a node') + ul(choices) )
        booleanParam('UNSAFE_RESET_ALL', false, 'If set to true then delete all local node state. Otherwise leave it for restart.')
        booleanParam('JOIN_AS_VALIDATOR', false, 'If set to true causes node to join network as validator. It will work only with `create-node`')
        booleanParam('USE_REMOTE_SNAPSHOT', false, 'If set to true uses data from available validator to configure remote snapshot in tendermint config')
        stringParam('USE_REMOTE_SNAPSHOT_BLOCK_HEIGHT', '0', 'If set to any value different than 0 then ansible while omit reading /api/v2/snapshot tendermint API and set --load-from-block-height flag for vega directly from this input')
        booleanParam('RANDOM_NODE', false, 'If set to true restart random node instead of the one provided in the parameters.')
        stringParam('RELEASE_VERSION', '', 'Specify which version of vega to deploy. Leave empty to restart network only.')
        choiceParam(
            'NODE',
            (0..15).collect { "n${it.toString().padLeft( 2, '0' )}.${args.name}.vega.xyz" } +
            [
                "be.${args.name}.vega.xyz"
            ],
            'Choose which node to restart')
        stringParam('TIMEOUT', '40', 'Number of minutes after which the job will stop')
        stringParam('VEGA_VERSION', '', '''(Use only if you know what you are doing). Specify which version of vega to deploy. Leave empty to restart network only.
        Provide git branch, tag or hash of the vegaprotocol/vega repository or leave empty''')
        booleanParam('DISABLE_LOCK', false, 'Use only if you know what you are doing!!! Useful when provisioning many same nodes at the time')
    }
}

def vegavisorProtocolUpgradeParams() {
    return vegavisorParamsBase() << {
        stringParam('UPGRADE_BLOCK', '', 'Protocol upgrade block. Leave empty to use: current block + 200')
        stringParam('RELEASE_VERSION', '', 'Specify which version of vega to deploy. Leave empty to restart network only.')
        booleanParam('MANUAL_INSTALL', true, 'If true, then config and binaries are uploaded manualy before protocol upgrade. When false, then visor automatically create everything.')
        stringParam('TIMEOUT', '40', 'Number of minutes after which the job will stop')
        stringParam('DOCKER_VERSION', '', 'Specify which version of docker images to deploy. Leave empty to not change.')
    }
}

def vegavisorTopupBotsParams() {
    return {
        stringParam('JENKINS_SHARED_LIB_BRANCH', 'main', 'Branch of jenkins-shared-library from which pipeline should be run')
        stringParam('DEVOPSTOOLS_BRANCH', 'main', 'Git branch, tag or hash of the vegaprotocol/devopstools repository')
        stringParam('TIMEOUT', '15', 'Number of minutes after which the job will stop')
    }
}

def systemTestsParamsGeneric(args=[:]) {
    return {
        stringParam('ORIGIN_REPO', 'vegaprotocol/vega', 'repository which acts as vega source code (used for forks builds)')
        stringParam('VEGA_BRANCH', 'develop', 'Git branch, tag or hash of the vegaprotocol/vega repository')
        stringParam('SYSTEM_TESTS_BRANCH', 'develop', 'Git branch, tag or hash of the vegaprotocol/system-tests repository')
        stringParam('VEGACAPSULE_BRANCH', 'main', 'Git branch, tag or hash of the vegaprotocol/vegacapsule repository')
        stringParam('VEGATOOLS_BRANCH', 'develop', 'Git branch, tag or hash of the vegaprotocol/vegatools repository')
        stringParam('DEVOPS_INFRA_BRANCH', 'master', 'Git branch, tag or hash of the vegaprotocol/devops-infra repository')
        stringParam('DEVOPSSCRIPTS_BRANCH', 'main', 'Git branch, tag or hash of the vegaprotocol/devopsscripts repository')
        stringParam('DEVOPSTOOLS_BRANCH', 'main', 'Git branch, tag or hash of the vegaprotocol/devopstools repository')
        stringParam('JENKINS_SHARED_LIB_BRANCH', 'main', 'Branch of jenkins-shared-library from which pipeline should be run')
        booleanParam('SYSTEM_TESTS_DEBUG', false, 'Enable debug logs for system-tests execution')
        stringParam('TIMEOUT', '300', 'Timeout in minutes, after which the pipline is force stopped.')
        booleanParam('PRINT_NETWORK_LOGS', false, 'By default logs are only archived as as Jenkins Pipeline artifact. If this is checked, the logs will be printed in jenkins as well')
        booleanParam('RUN_PROTOCOL_UPGRADE_PROPOSAL', true, 'Determines whether the post-run stage to check protocol upgrade snapshot is run')
        if (args.get('SCENARIO', false)){
            choiceParam('SCENARIO', args.get('SCENARIO') == 'NIGHTLY' ? ['NIGHTLY', 'PR'] : ['PR', 'NIGHTLY'], 'Choose which scenario should be run, to see exact implementation of the scenario visit -> https://github.com/vegaprotocol/jenkins-shared-library/blob/main/vars/pipelineCapsuleSystemTests.groovy')
        }
    }
}

def systemTestsParamsWrapper() {
    return systemTestsParamsGeneric() << {
        stringParam('SYSTEM_TESTS_TEST_FUNCTION', '', 'Run only a tests with a specified function name. This is actually a "pytest -k $SYSTEM_TESTS_TEST_FUNCTION_NAME" command-line argument, see more: https://docs.pytest.org/en/stable/usage.html')
        stringParam('SYSTEM_TESTS_TEST_MARK', 'smoke', 'Run only a tests with the specified mark(s). This is actually a "pytest -m $SYSTEM_TESTS_TEST_MARK" command-line argument, see more: https://docs.pytest.org/en/stable/usage.html')
        stringParam('SYSTEM_TESTS_TEST_DIRECTORY', '', 'Run tests from files in this directory and all sub-directories')
        stringParam('TEST_EXTRA_PYTEST_ARGS', '', 'extra args passed to system tests executiom')
        stringParam('TEST_DIRECTORY', '', 'list or wildcard of files/directories to collect test files from')
        stringParam('CAPSULE_CONFIG', 'capsule_config.hcl', 'Run tests using the given vegacapsule config file')
        booleanParam('SKIP_MULTISIGN_SETUP', false, h('When true validators are not added to multisig as signers'))
    }
}


def lnlSystemTestsparams() {
    return systemTestsParamsGeneric() << {
        stringParam('SYSTEM_TESTS_TEST_FUNCTION', 'test_checkpoint_loaded', 'Run only a tests with a specified function name. This is actually a "pytest -k $SYSTEM_TESTS_TEST_FUNCTION_NAME" command-line argument, see more: https://docs.pytest.org/en/stable/usage.html')
        stringParam('SYSTEM_TESTS_TEST_MARK', '', 'Run only a tests with the specified mark(s). This is actually a "pytest -m $SYSTEM_TESTS_TEST_MARK" command-line argument, see more: https://docs.pytest.org/en/stable/usage.html')
        stringParam('SYSTEM_TESTS_TEST_DIRECTORY', 'tests/LNL', 'Run tests from files in this directory and all sub-directories')
        stringParam('TEST_EXTRA_PYTEST_ARGS', '', 'extra args passed to system tests executiom')
        stringParam('CAPSULE_CONFIG', 'capsule_config_mainnet.hcl', 'Run tests using the given vegacapsule config file')
        booleanParam('SKIP_MULTISIGN_SETUP', true, h('When true validators are not added to multisig as signers'))
    }
}

def approbationParams(def config=[:]) {
    return {
        if (config.type == 'core') {
            stringParam('ORIGIN_REPO', 'vegaprotocol/vega', 'repo which acts as source of vegaprotocol (used for forks builds)')
            stringParam('VEGA_CORE_BRANCH', 'develop', 'Git branch, tag or hash of the origin repo repository')
            stringParam('MULTISIG_CONTROL_BRANCH', 'develop', 'Git branch, tag or hash of the vegaprotocol/MultisigControl repository')
            stringParam('VEGA_TOKEN_V2_BRANCH', 'main', 'Git branch, tag or hash of the vegaprotocol/Vega_Token_V2 repository')
            stringParam('STAKING_BRIDGE_BRANCH', 'main', 'Git branch, tag or hash of the vegaprotocol/Staking_Bridge repository')
            stringParam('SYSTEM_TESTS_BRANCH', 'develop', 'Git branch, tag or hash of the vegaprotocol/system-tests repository')
        }
        else if (config.type == 'frontend') {
            stringParam('FRONTEND_BRANCH', 'develop', 'Git branch, tag or hash of the vegaprotocol/frontend-monorepo repository')
            stringParam('VEGAWALLET_DESKTOP_BRANCH', 'main', 'Git branch, tag or hash of the vegaprotocol/vegawallet-desktop repository')
        }

        stringParam('SPECS_BRANCH', 'master', 'Git branch, tag or hash of the vegaprotocol/specs repository')

        if (config.type == 'core') {
            stringParam('SPECS_ARG', '{./specs/protocol/**/*.{md,ipynb},./specs/non-protocol-specs/**/*.{md,ipynb}}', '--specs argument value')
        }
        else if (config.type == 'frontend') {
            stringParam('SPECS_ARG', 'specs/user-interface/**/*.md', '--specs argument value')
        }

        if (config.type == 'core') {
            stringParam('CATEGORIES_ARG', './specs/protocol/categories.json', '--categories argument value')
        }
        else if (config.type == 'frontend') {
            stringParam('CATEGORIES_ARG', 'specs/user-interface/categories.json', '--categories argument value')
        }

        if (config.type == 'core') {
            stringParam('TESTS_ARG',  '{./system-tests/tests/**/*.py,./vega/core/integration/**/*.{go,feature},./MultisigControl/test/*.js,./Vega_Token_V2/test/*.js,./Staking_Bridge/test/*.js}', '--tests argument value')
        }
        else if (config.type == 'frontend') {
            stringParam('TESTS_ARG', '{frontend-monorepo/apps/*-e2e/**/*.cy.{ts,js,tsx,jsx},vegawallet-desktop/frontend/automation/cypress/**/*.cy.{ts,js,tsx,jsx}}', '--tests argument value')
        }

        if (config.type == 'core' ) {
            stringParam('IGNORE_ARG','{./spec-internal/protocol/0060*,./specs/non-protocol-specs/{0001-NP*,0002-NP*,0004-NP*,0006-NP*,0007-NP*,0008-NP*,0010-NP*}}', '--ignore argument value' )
        }

        if (config.type == 'core') {
            stringParam('OTHER_ARG', '--show-branches --show-mystery --category-stats --show-files --verbose --output-csv --output-jenkins --show-file-stats',  'Other arguments')
        }
        else if (config.type == 'frontend') {
            stringParam('OTHER_ARG', '--category-stats --show-branches --verbose --show-files --output-jenkins  --output-csv', 'Other arguments')
        }

        stringParam('APPROBATION_VERSION', 'latest', 'Released version of Approbation. latest can be used')

        stringParam('JENKINS_SHARED_LIB_BRANCH', 'main', 'Branch of jenkins-shared-library from which pipeline should be run')
    }
}

def jobs = [
    // DSL Job - the one that manages this file
    [
        name: 'private/DSL Job',
        repo: 'jenkins-shared-library',
        description: h('this job is used to generate other jobs'),
        jenkinsfile: 'dsl/Jenkinsfile',
        branch: 'main',
        disableConcurrentBuilds: true,
        numToKeep: 100,
        check: 'DSL Job',
    ],
    // Jenkins Configuration As Code
    [
        name: 'private/Jenkins Configuration as Code Pipeline',
        check: 'Jenkins Configuration as Code pipeline',
        repo: 'jenkins-shared-library',
        description: h('This job is used to auto apply changes to jenkins instance configuration'),
        jenkinsfile: 'jcasc/Jenkinsfile',
        branch: 'main',
        disableConcurrentBuilds: true,
        numToKeep: 100,
    ],
    [
        name: 'private/Deployments/Publish-vega-dev-releases',
        description: h('This job builds vega binaries and publishes then as GitHub release to vega-dev-releases GitHub repo'),
        useScmDefinition: false,
        definition: libDefinition('pipelineVegaDevRelease()'),
        parameters: {
            stringParam('VEGA_VERSION', 'develop', 'Git branch, tag or hash of the vegaprotocol/vega repository')
            booleanParam('DEPLOY_TO_DEVNET_1', true, 'Trigger deployment to Devnet 1')
            booleanParam('DEPLOY_TO_STAGNET_1', false, 'Trigger deployment to Stagnet 1')
            stringParam('JENKINS_SHARED_LIB_BRANCH', 'main', 'Branch of jenkins-shared-library from which pipeline should be run')
        },
        disableConcurrentBuilds: true,
    ],
    //
    // Devnet 1
    //
    [
        name: 'private/Deployments/devnet1/Manage-Network',
        description: devopsInfraDocs,
        useScmDefinition: false,
        definition: libDefinition('pipelineVegavisorManageNetwork()'),
        env: [
            NET_NAME: 'devnet1',
            ANSIBLE_LIMIT: 'devnet1',
            ANSIBLE_PLAYBOOK: 'playbook-barenode.yaml',
        ],
        parameters: vegavisorRestartNetworkParams(
            'TOP_UP_BOTS': true,
            'USE_CHECKPOINT': false,
            'CREATE_MARKETS': true,
        ),
        disableConcurrentBuilds: true,
    ],
    [
        name: 'private/Deployments/devnet1/Manage-Node',
        description: vegavisorManageNodeDescription(),
        useScmDefinition: false,
        definition: libDefinition('pipelineVegavisorManageNode()'),
        env: [
            NET_NAME: 'devnet1',
            ANSIBLE_PLAYBOOK: 'playbook-barenode.yaml',
        ],
        parameters: vegavisorManageNodeParams(name: 'devnet1'),
        disableConcurrentBuilds: true,
        parameterizedCron: [
            // restart a random node every 1 hour
            '20 * * * * %' + ['RANDOM_NODE=true'].join(';'),
            // validator joining & leaving every 1 hour
            '50 * * * * %' + [
                'ACTION=create-node',
                'UNSAFE_RESET_ALL=true',
                'JOIN_AS_VALIDATOR=true',
                'USE_REMOTE_SNAPSHOT=true',
                'NODE=n05.devnet1.vega.xyz'
            ].join(';'),
        ].join('\n'),
    ],
    [
        name: 'private/Deployments/devnet1/Protocol-Upgrade',
        useScmDefinition: false,
        definition: libDefinition('pipelineVegavisorProtocolUpgradeNetwork()'),
        env: [
            NET_NAME: 'devnet1',
            ANSIBLE_LIMIT: 'devnet1',
        ],
        parameters: vegavisorProtocolUpgradeParams(),
        disableConcurrentBuilds: true,
    ],
    [
        name: 'private/Deployments/devnet1/Topup-Bots',
        useScmDefinition: false,
        definition: libDefinition('pipelineVegavisorTopupBots()'),
        env: [
            NET_NAME: 'devnet1',
        ],
        parameters: vegavisorTopupBotsParams(),
        cron: 'H/15 * * * *',
        disableConcurrentBuilds: true,
    ],
    //
    // Sandbox
    //
    [
        name: 'private/Deployments/sandbox/Manage-Network',
        description: devopsInfraDocs,
        useScmDefinition: false,
        definition: libDefinition('pipelineVegavisorManageNetwork()'),
        env: [
            NET_NAME: 'sandbox',
            ANSIBLE_LIMIT: 'sandbox',
            ANSIBLE_PLAYBOOK: 'playbook-barenode.yaml',
        ],
        parameters: vegavisorRestartNetworkParams(),
        disableConcurrentBuilds: true,
    ],
    [
        name: 'private/Deployments/sandbox/Manage-Node',
        description: vegavisorManageNodeDescription(),
        useScmDefinition: false,
        definition: libDefinition('pipelineVegavisorManageNode()'),
        env: [
            NET_NAME: 'sandbox',
            ANSIBLE_PLAYBOOK: 'playbook-barenode.yaml',
        ],
        parameters: vegavisorManageNodeParams(name: 'sandbox'),
        disableConcurrentBuilds: true,
        // restart a random node every 30min
        // parameterizedCron: 'H/30 * * * * %RANDOM_NODE=true',
    ],
    [
        name: 'private/Deployments/sandbox/Protocol-Upgrade',
        useScmDefinition: false,
        definition: libDefinition('pipelineVegavisorProtocolUpgradeNetwork()'),
        env: [
            NET_NAME: 'sandbox',
            ANSIBLE_LIMIT: 'sandbox',
        ],
        parameters: vegavisorProtocolUpgradeParams(),
        disableConcurrentBuilds: true,
    ],
    //
    // Stagnet 1
    //
    [
        name: 'private/Deployments/stagnet1/Manage-Network',
        description: devopsInfraDocs,
        useScmDefinition: false,
        definition: libDefinition('pipelineVegavisorManageNetwork()'),
        env: [
            NET_NAME: 'stagnet1',
            ANSIBLE_LIMIT: 'stagnet1',
            ANSIBLE_PLAYBOOK: 'playbook-barenode.yaml',
        ],
        parameters: vegavisorRestartNetworkParams(),
        disableConcurrentBuilds: true,
    ],
    [
        name: 'private/Deployments/stagnet1/Manage-Node',
        description: vegavisorManageNodeDescription(),
        useScmDefinition: false,
        definition: libDefinition('pipelineVegavisorManageNode()'),
        env: [
            NET_NAME: 'stagnet1',
            ANSIBLE_PLAYBOOK: 'playbook-barenode.yaml',
        ],
        parameters: vegavisorManageNodeParams(name: 'stagnet1'),
        disableConcurrentBuilds: true,
        // restart a random node every 30min
        //parameterizedCron: 'H/30 * * * * %RANDOM_NODE=true',
    ],
    [
        name: 'private/Deployments/stagnet1/Protocol-Upgrade',
        useScmDefinition: false,
        definition: libDefinition('pipelineVegavisorProtocolUpgradeNetwork()'),
        env: [
            NET_NAME: 'stagnet1',
            ANSIBLE_LIMIT: 'stagnet1',
        ],
        parameters: vegavisorProtocolUpgradeParams(),
        disableConcurrentBuilds: true,
    ],
    [
        name: 'private/Deployments/stagnet1/Topup-Bots',
        useScmDefinition: false,
        definition: libDefinition('pipelineVegavisorTopupBots()'),
        env: [
            NET_NAME: 'stagnet1',
        ],
        parameters: vegavisorTopupBotsParams(),
        // cron: 'H/30 * * * *',
        disableConcurrentBuilds: true,
    ],
    //
    // Stagnet 2
    //
    [
        name: 'private/Deployments/stagnet2/Manage-Network',
        description: devopsInfraDocs,
        useScmDefinition: false,
        definition: libDefinition('pipelineVegavisorManageNetwork()'),
        env: [
            NET_NAME: 'stagnet2',
            ANSIBLE_LIMIT: 'stagnet2',
            ANSIBLE_PLAYBOOK: 'playbook-barenode.yaml',
        ],
        parameters: vegavisorRestartNetworkParams(),
        disableConcurrentBuilds: true,
    ],
    [
        name: 'private/Deployments/stagnet2/Manage-Node',
        description: vegavisorManageNodeDescription(),
        useScmDefinition: false,
        definition: libDefinition('pipelineVegavisorManageNode()'),
        env: [
            NET_NAME: 'stagnet2',
            ANSIBLE_PLAYBOOK: 'playbook-barenode.yaml',
        ],
        parameters: vegavisorManageNodeParams(name: 'stagnet2'),
        disableConcurrentBuilds: true,
        // restart a random node every 30min
        //parameterizedCron: 'H/30 * * * * %RANDOM_NODE=true',
    ],
    [
        name: 'private/Deployments/stagnet2/Protocol-Upgrade',
        useScmDefinition: false,
        definition: libDefinition('pipelineVegavisorProtocolUpgradeNetwork()'),
        env: [
            NET_NAME: 'stagnet2',
            ANSIBLE_LIMIT: 'stagnet2',
        ],
        parameters: vegavisorProtocolUpgradeParams(),
        disableConcurrentBuilds: true,
    ],
    [
        name: 'private/Deployments/stagnet2/Topup-Bots',
        useScmDefinition: false,
        definition: libDefinition('pipelineVegavisorTopupBots()'),
        env: [
            NET_NAME: 'stagnet2',
        ],
        parameters: vegavisorTopupBotsParams(),
        // cron: 'H/30 * * * *',
        disableConcurrentBuilds: true,
    ],
    //
    // Stagnet 3
    //
    [
        name: 'private/Deployments/stagnet3/Manage-Network',
        description: devopsInfraDocs,
        useScmDefinition: false,
        definition: libDefinition('pipelineVegavisorManageNetwork()'),
        env: [
            NET_NAME: 'stagnet3',
            ANSIBLE_LIMIT: 'stagnet3',
            ANSIBLE_PLAYBOOK: 'playbook-barenode.yaml',
        ],
        parameters: vegavisorRestartNetworkParams(),
        disableConcurrentBuilds: true,
    ],
    [
        name: 'private/Deployments/stagnet3/Manage-Node',
        description: vegavisorManageNodeDescription(),
        useScmDefinition: false,
        definition: libDefinition('pipelineVegavisorManageNode()'),
        env: [
            NET_NAME: 'stagnet3',
            ANSIBLE_PLAYBOOK: 'playbook-barenode.yaml',
        ],
        parameters: vegavisorManageNodeParams(name: 'stagnet3'),
        disableConcurrentBuilds: true,
        // restart a random node every 30min
        //parameterizedCron: 'H/30 * * * * %RANDOM_NODE=true',
    ],
    [
        name: 'private/Deployments/stagnet3/Protocol-Upgrade',
        useScmDefinition: false,
        definition: libDefinition('pipelineVegavisorProtocolUpgradeNetwork()'),
        env: [
            NET_NAME: 'stagnet3',
            ANSIBLE_LIMIT: 'stagnet3',
        ],
        parameters: vegavisorProtocolUpgradeParams(),
        // weekdays 5AM UTC, jenkins prefred minute
        parameterizedCron: 'H 1 * * 1-5 %' + [
            'RELEASE_VERSION=latest',
        ].join(';'),
        disableConcurrentBuilds: true,
    ],
    [
        name: 'private/Deployments/stagnet3/Topup-Bots',
        useScmDefinition: false,
        definition: libDefinition('pipelineVegavisorTopupBots()'),
        env: [
            NET_NAME: 'stagnet3',
        ],
        parameters: vegavisorTopupBotsParams(),
        // cron: 'H/30 * * * *',
        disableConcurrentBuilds: true,
    ],
    //
    // Fairground
    //
    [
        name: 'private/Deployments/fairground/Manage-Network',
        description: devopsInfraDocs,
        useScmDefinition: false,
        definition: libDefinition('pipelineVegavisorManageNetwork()'),
        env: [
            NET_NAME: 'fairground',
            ANSIBLE_LIMIT: 'fairground',
            ANSIBLE_PLAYBOOK: 'playbook-barenode.yaml',
        ],
        parameters: vegavisorRestartNetworkParams('USE_CHECKPOINT': true),
        disableConcurrentBuilds: true,
    ],
    [
        name: 'private/Deployments/fairground/Manage-Node',
        description: vegavisorManageNodeDescription(),
        useScmDefinition: false,
        definition: libDefinition('pipelineVegavisorManageNode()'),
        env: [
            NET_NAME: 'fairground',
            ANSIBLE_PLAYBOOK: 'playbook-barenode.yaml',
        ],
        parameters: vegavisorManageNodeParams(name: 'testnet'),
        disableConcurrentBuilds: true,
        // restart a random node every 30min
        // parameterizedCron: 'H/30 * * * * %RANDOM_NODE=true',
    ],
    [
        name: 'private/Deployments/fairground/Protocol-Upgrade',
        useScmDefinition: false,
        definition: libDefinition('pipelineVegavisorProtocolUpgradeNetwork()'),
        env: [
            NET_NAME: 'fairground',
            ANSIBLE_LIMIT: 'fairground',
        ],
        parameters: vegavisorProtocolUpgradeParams(),
        disableConcurrentBuilds: true,
    ],
    [
        name: 'private/Deployments/fairground/Topup-Bots',
        useScmDefinition: false,
        definition: libDefinition('pipelineVegavisorTopupBots()'),
        env: [
            NET_NAME: 'fairground',
        ],
        parameters: vegavisorTopupBotsParams(),
        cron: 'H/30 * * * *',
        disableConcurrentBuilds: true,
    ],
    //
    // mainnet-mirror
    //
    [
        name: 'private/Deployments/mainnet-mirror/Manage-Network',
        description: devopsInfraDocs,
        useScmDefinition: false,
        definition: libDefinition('pipelineVegavisorManageNetwork()'),
        env: [
            NET_NAME: 'mainnet-mirror',
            ANSIBLE_LIMIT: 'mainnet-mirror',
            ANSIBLE_PLAYBOOK: 'playbook-barenode.yaml',
        ],
        parameters: vegavisorRestartNetworkParams(),
        disableConcurrentBuilds: true,
    ],
    [
        name: 'private/Deployments/mainnet-mirror/Manage-Node',
        description: vegavisorManageNodeDescription(),
        useScmDefinition: false,
        definition: libDefinition('pipelineVegavisorManageNode()'),
        env: [
            NET_NAME: 'mainnet-mirror',
            ANSIBLE_PLAYBOOK: 'playbook-barenode.yaml',
        ],
        parameters: vegavisorManageNodeParams(name: 'mainnet-mirror'),
        disableConcurrentBuilds: true,
    ],
    [
        name: 'private/Deployments/mainnet-mirror/Manage-Network-53',
        description: devopsInfraDocs,
        useScmDefinition: false,
        definition: libDefinition('pipelineVegavisorManageNetwork()'),
        env: [
            NET_NAME: 'mainnet-mirror',
            ANSIBLE_LIMIT: 'mainnet-mirror',
            ANSIBLE_PLAYBOOK: 'playbook-barenode53.yaml',
        ],
        parameters: vegavisorRestartNetworkParams(),
        disableConcurrentBuilds: true,
    ],
    [
        name: 'private/Deployments/mainnet-mirror/Manage-Node-53',
        description: vegavisorManageNodeDescription(),
        useScmDefinition: false,
        definition: libDefinition('pipelineVegavisorManageNode()'),
        env: [
            NET_NAME: 'mainnet-mirror',
            ANSIBLE_PLAYBOOK: 'playbook-barenode53.yaml',
        ],
        parameters: vegavisorManageNodeParams(name: 'mainnet-mirror'),
        disableConcurrentBuilds: true,
    ],
    //
    // System-Tests
    //
    [
        name: 'common/system-tests-wrapper',
        useScmDefinition: false,
        definition: libDefinition('capsuleSystemTests()'),
        parameters: systemTestsParamsWrapper(),
        copyArtifacts: true,
        daysToKeep: 14,
        numToKeep: 4000,
    ],
    [
        name: 'common/system-tests-lnl-mainnet',
        useScmDefinition: false,
        definition: libDefinition('pipelineCapsuleLNL()'),
        parameters: lnlSystemTestsparams(),
        copyArtifacts: true,
        daysToKeep: 14,
        cron: 'H 3 * * *',
    ],
    [
        name: 'common/system-tests',
        description: 'This job is just a functional wrapper over techincal call of old system-tests job. If you wish to trigger specific system-tests run go to https://jenkins.ops.vega.xyz/job/common/job/system-tests-wrapper/',
        useScmDefinition: false,
        definition: libDefinition('pipelineCapsuleSystemTests()'),
        parameters: systemTestsParamsGeneric('SCENARIO': 'PR'),
        copyArtifacts: true,
        daysToKeep: 14,
    ],
    [
        name: 'common/system-tests-nightly',
        description: 'This job is executed every 24h to ensure stability of the system',
        useScmDefinition: false,
        definition: libDefinition('pipelineCapsuleSystemTests()'),
        parameters: systemTestsParamsGeneric('SCENARIO': 'NIGHTLY'),
        copyArtifacts: true,
        daysToKeep: 14,
        cron: 'H 0 * * *',
    ],
    //
    // Vega Market Simulator
    //
    [
        name: 'common/vega-market-sim',
        description: 'Simulate Markets on fully controllable Simulator of Vega Network',
        useScmDefinition: false,
        definition: libDefinition('pipelineVegaMarketSim()'),
        parameters: {
            stringParam('ORIGIN_REPO', 'vegaprotocol/vega', 'repository which acts as vega source code (used for forks builds)')
            stringParam('VEGA_VERSION', 'develop', 'Git branch, tag or hash of the vegaprotocol/vega repository')
            stringParam('VEGA_MARKET_SIM_BRANCH', 'develop', 'Git branch, tag or hash of the vegaprotocol/vega-market-sim repository')
            stringParam('TIMEOUT', '45', 'Number of minutes after which the job will stop')
            booleanParam('RUN_EXTRA_TESTS', false, 'Run extra tests that you don\'t always want to run')
            booleanParam('RUN_LEARNING', false, 'Run a long reinforcement learning test')
            stringParam('JENKINS_SHARED_LIB_BRANCH', 'main', 'Branch of jenkins-shared-library from which pipeline should be run')
        },
        copyArtifacts: true,
        daysToKeep: 14,
    ],
    [
        name: 'common/vega-market-sim-reinforcement',
        description: 'Simulate Markets on fully controllable Simulator of Vega Network - Reinforcement learning tests',
        useScmDefinition: false,
        definition: libDefinition('pipelineVegaMarketSim()'),
        parameters: {
            stringParam('ORIGIN_REPO', 'vegaprotocol/vega', 'repository which acts as vega source code (used for forks builds)')
            stringParam('VEGA_VERSION', 'develop', 'Git branch, tag or hash of the vegaprotocol/vega repository')
            stringParam('VEGA_MARKET_SIM_BRANCH', 'develop', 'Git branch, tag or hash of the vegaprotocol/vega-market-sim repository')
            stringParam('TIMEOUT', '1440', 'Number of minutes after which the job will stop')
            booleanParam('RUN_EXTRA_TESTS', false, 'Run extra tests that you don\'t always want to run')
            booleanParam('RUN_LEARNING', true, 'Run a long reinforcement learning test')
            stringParam('NUM_RL_ITERATIONS', '600', 'Number of iterations to run RL tests for')
            stringParam('JENKINS_SHARED_LIB_BRANCH', 'main', 'Branch of jenkins-shared-library from which pipeline should be run')
        },
        copyArtifacts: true,
        daysToKeep: 14,
        cron: 'H 0 * * *',
    ],
    //
    // Snapshots
    //
    [
        name: 'private/Snapshots/Devnet1',
        useScmDefinition: false,
        env: [
            NET_NAME: 'devnet1',
        ],
        parameters: {
            stringParam('TIMEOUT', '10', 'Number of minutes after which the node will stop')
            stringParam('JENKINS_SHARED_LIB_BRANCH', 'main', 'Branch of jenkins-shared-library from which pipeline should be run')
        },
        daysToKeep: 4,
        numToKeep: 500,
        definition: libDefinition('pipelineSnapshotTesting()'),
        cron: "H/12 * * * *",
        disableConcurrentBuilds: true,
    ],
    [
        name: 'private/Snapshots/Stagnet1',
        useScmDefinition: false,
        env: [
            NET_NAME: 'stagnet1',
        ],
        parameters: {
            stringParam('TIMEOUT', '10', 'Number of minutes after which the node will stop')
            stringParam('JENKINS_SHARED_LIB_BRANCH', 'main', 'Branch of jenkins-shared-library from which pipeline should be run')
        },
        daysToKeep: 4,
        numToKeep: 500,
        definition: libDefinition('pipelineSnapshotTesting()'),
        cron: "H/12 * * * *",
        disableConcurrentBuilds: true,
    ],
    [
        name: 'private/Snapshots/Stagnet3',
        useScmDefinition: false,
        env: [
            NET_NAME: 'stagnet3',
        ],
        parameters: {
            stringParam('TIMEOUT', '10', 'Number of minutes after which the node will stop')
            stringParam('JENKINS_SHARED_LIB_BRANCH', 'main', 'Branch of jenkins-shared-library from which pipeline should be run')
        },
        daysToKeep: 4,
        numToKeep: 500,
        definition: libDefinition('pipelineSnapshotTesting()'),
        cron: "H/12 * * * *",
        disableConcurrentBuilds: true,
    ],
    [
        name: 'private/Snapshots/Fairground',
        // disabled: true,
        useScmDefinition: false,
        env: [
            NET_NAME: 'fairground',
        ],
        parameters: {
            stringParam('TIMEOUT', '10', 'Number of minutes after which the node will stop')
            stringParam('JENKINS_SHARED_LIB_BRANCH', 'main', 'Branch of jenkins-shared-library from which pipeline should be run')
        },
        daysToKeep: 4,
        numToKeep: 500,
        definition: libDefinition('pipelineSnapshotTesting()'),
        // cron: "H/12 * * * *",
        disableConcurrentBuilds: true,
    ],
    [
        name: 'private/Automations/Checkpoint-Backup',
        useScmDefinition: false,
        parameters: {
            booleanParam('DEVNET_1', false, 'Backup the latest checkpoint from the Devnet 1')
            booleanParam('FAIRGROUND', true, 'Backup the latest checkpoint from the Fairground network')
            booleanParam('MAINNET', true, 'Backup the latest checkpoint from the Mainnet')
            stringParam('CHECKPOINT_STORE_BRANCH', 'main', 'Git branch, tag or hash of the vegaprotocol/checkpoint-store repository')
            stringParam('JENKINS_SHARED_LIB_BRANCH', 'main', 'Branch of jenkins-shared-library from which pipeline should be run')
        },
        //cron: 'H */2 * * *',
        disableConcurrentBuilds: true,
        description: 'Backup checkpoints from different networks into vegaprotocol/checkpoint-store',
        definition: libDefinition('pipelineCheckpointBackup()'),
    ],
    //
    // Approbations
    //
    [
        name: 'common/approbation',
        useScmDefinition: false,
        definition: libDefinition('pipelineApprobation(type: "core")'),
        parameters: approbationParams(type: 'core'),
        copyArtifacts: true,
    ],
    [
        name: 'common/approbation-frontend',
        useScmDefinition: false,
        definition: libDefinition('pipelineApprobation(type: "frontend")'),
        parameters: approbationParams(type: 'frontend'),
        copyArtifacts: true,
    ],
    [
        name: 'common/frontend-monorepo',
        repo: 'frontend-monorepo',
        useGithub: true,
        jenkinsfile: 'Jenkinsfile',
        check: 'Approbation Pipeline',
        branch: 'develop',
        disableConcurrentBuilds: true,
        env: [
            // hax getCommitHash()
            BRANCH_NAME: 'develop',
            CHANGE_BRANCH: 'develop',
        ],
    ],
    [
        name: 'common/vegawallet-desktop',
        repo: 'vegawallet-desktop',
        useGithub: true,
        jenkinsfile: 'Jenkinsfile',
        branch: 'develop',
        disableConcurrentBuilds: true,
        check: 'Approbation Pipeline',
        env: [
            // hax getCommitHash()
            BRANCH_NAME: 'develop',
            CHANGE_BRANCH: 'develop',
        ],
    ],
    [
        name: 'common/snapshot-soak-tests',
        useScmDefinition: false,
        definition: libDefinition('pipelineSnapshotSoakTest()'),
        parameters: {
            stringParam('SYSTEM_TEST_JOB_NAME', 'common/system-tests-wrapper', 'Job from which snapshot artifcats will be copied')
            stringParam('SYSTEM_TEST_BUILD_NUMBER', '0', 'Job number to copy artifacts')
            stringParam('JENKINS_SHARED_LIB_BRANCH', 'main', 'Branch of jenkins-shared-library from which pipeline should be run')
            stringParam('VEGATOOLS_BRANCH', 'develop', 'Git branch, tag or hash of the vegaprotocol/vegatools repository')
        }
    ]
]

// MAIN
jobs.each { job ->
    createCommonPipeline(job)
}
