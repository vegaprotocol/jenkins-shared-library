/* groovylint-disable CompileStatic, DuplicateNumberLiteral, DuplicateStringLiteral, LineLength */
// https://github.com/janinko/ghprb/issues/77
def scmDefinition(args){
    return {
        cpsScm {
            scm {
                git {
                    if (args.branch) {
                        branch("*/${args.branch}")
                    }
                    remote {
                        if (args.useGithub) {
                            github(args.repoName)
                        }
                        else {
                            url(args.repo)
                            credentials(args.get('credentials', "vega-ci-bot"))
                            if (args.branch) {
                                refspec("+refs/heads/${args.branch}:refs/remotes/origin/${args.branch}")
                            }
                        }
                    }
                    if (args.check) {
                        extensions {
                            gitSCMChecksExtension {
                                // If this option is checked, verbose log will be output to build console; the verbose log is useful for debugging the publisher creation.
                                verboseConsoleLog(true)
                            }
                            gitSCMStatusChecksExtension {
                                name(args.check)
                                unstableBuildNeutral(true)
                            }
                        }
                    }
                }
            }
            scriptPath(args.get('jenkinsfile', 'Jenkinsfile'))
        }
    }
}

def h(def text, def num=4) {
    return "<h${num}>${text}</h${num}>"
}

def ul(def ulMap) {
    if (ulMap instanceof Map) {
        ulMap = ulMap.collect { "${it.key} - ${it.value}" }
    }
    def entries = ulMap.collect { "<li>${it}</li>" }.join("\n")
    return "<ul>${entries}</ul>"
}


def standardDescription() {
    def url = "https://github.com/vegaprotocol/jenkins-shared-library/tree/main/dsl"
    return h("""
        This job was automatically generated by DSL script located at <a href="${url}">this repository</a> and processed by <a href='${binding.variables.get('JOB_URL')}'>this job</a>, any manual configuration will be overriden.
    """, 5)
}


def createCommonPipeline(args){
    args.repoName = "vegaprotocol/${args.repo}"
    args.repo = "git@github.com:vegaprotocol/${args.repo}.git"

    def des = args.get('description', '')
    des += "${des ? '<br/>' : ''} ${standardDescription()}"

    return pipelineJob(args.name) {

        disabled(args.get('disabled', false))

        description(des)

        logRotator {
            daysToKeep(args.daysToKeep ?: 45)
            numToKeep(args.numToKeep ?: 1000)
            artifactDaysToKeep(args.daysToKeep ?: 45)
            artifactNumToKeep(args.numToKeep ?: 1000)
        }

        if (args.parameters) {
            parameters args.parameters
        }

        environmentVariables {
            keepBuildVariables(true)
            keepSystemVariables(true)
            args.env.each { key, value ->
                env(key.toUpperCase(), value)
            }
            env("GOROOT", "/usr/local/go")
            env("GOPATH", "/jenkins/GOPATH")
            env("GOCACHE", "/jenkins/GOCACHE")
            env("GO111MODULE", "on")
            env("GOBIN", "/jenkins/GOPATH/bin")
            env("PATH+EXTRA", "/jenkins/GOPATH/bin:/usr/local/go/bin")
        }

        if (args.get('useScmDefinition', true)) {
            definition scmDefinition(args)
        }
        else {
            definition args.definition
        }

        properties {
            if (args.copyArtifacts) {
                copyArtifactPermission {
                    projectNames('*')
                }
            }
            if (args.disableConcurrentBuilds) {
                disableConcurrentBuilds {
                    abortPrevious(args.abortPrevious ?: false)
                }
            }
            pipelineTriggers {
                triggers {
                    if (args.get('useScmDefinition', true)) {
                        githubPush()
                    }
                    if (args.cron) {
                        cron {
                            spec(args.cron)
                        }
                    }
                    if (args.parameterizedCron) {
                        parameterizedCron {
                            parameterizedSpecification(args.parameterizedCron)
                        }
                    }
                }
            }
        }
    }
}

def libDefinition(methodName) {
    return {
        cps {
            script('''
            library (
                identifier: "vega-shared-library@${env.JENKINS_SHARED_LIB_BRANCH}",
                changelog: false,
            )

            ''' + methodName)
        }
    }
}


createCommonPipeline(
    name: 'private/DSL Job',
    numToKeep: 50,
    repo: 'jenkins-shared-library',
    description: h('this job is used to generate other jobs'),
    jenkinsfile: 'dsl/Jenkinsfile',
    branch: 'main',
    disableConcurrentBuilds: true,
    check: 'DSL Job',
)
